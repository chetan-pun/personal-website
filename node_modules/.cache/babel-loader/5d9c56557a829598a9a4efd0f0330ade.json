{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer, useCallback } from \"react\";\nimport debounce from \"lodash/debounce\";\nconst INTERSECTION_THRESHOLD = 5;\nconst LOAD_DELAY_MS = 500;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"set\":\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    case \"onGrabData\":\n      {\n        return { ...state,\n          loading: false,\n          data: [...state.data, ...action.payload.data],\n          currentPage: state.currentPage + 1\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst useLazyLoad = _ref => {\n  _s();\n\n  let {\n    triggerRef,\n    onGrabData,\n    options\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, {\n    loading: false,\n    currentPage: 1,\n    data: []\n  });\n\n  const _handleEntry = async entry => {\n    const boundingRect = entry.boundingClientRect;\n    const intersectionRect = entry.intersectionRect;\n\n    if (!state.loading && entry.isIntersecting && intersectionRect.bottom - boundingRect.bottom <= INTERSECTION_THRESHOLD) {\n      dispatch({\n        type: \"set\",\n        payload: {\n          loading: true\n        }\n      });\n      const data = await onGrabData(state.currentPage);\n      dispatch({\n        type: \"onGrabData\",\n        payload: {\n          data\n        }\n      });\n    }\n  };\n\n  const handleEntry = debounce(_handleEntry, LOAD_DELAY_MS);\n  const onIntersect = useCallback(entries => {\n    handleEntry(entries[0]);\n  }, [handleEntry]);\n  useEffect(() => {\n    if (triggerRef.current) {\n      const container = triggerRef.current;\n      const observer = new IntersectionObserver(onIntersect, options);\n      observer.observe(container);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [triggerRef, onIntersect, options]);\n  return state;\n};\n\n_s(useLazyLoad, \"17ojoto1N2a+Ra/F8xoOcDD44FU=\");\n\nexport default useLazyLoad;","map":{"version":3,"names":["useEffect","useReducer","useCallback","debounce","INTERSECTION_THRESHOLD","LOAD_DELAY_MS","reducer","state","action","type","payload","loading","data","currentPage","useLazyLoad","triggerRef","onGrabData","options","dispatch","_handleEntry","entry","boundingRect","boundingClientRect","intersectionRect","isIntersecting","bottom","handleEntry","onIntersect","entries","current","container","observer","IntersectionObserver","observe","disconnect"],"sources":["/Users/chetanpun/Desktop/task/src/components/useLazyLoad.js"],"sourcesContent":["import { useEffect, useReducer, useCallback } from \"react\";\nimport debounce from \"lodash/debounce\";\n\nconst INTERSECTION_THRESHOLD = 5;\nconst LOAD_DELAY_MS = 500;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"set\": {\n      return {\n        ...state,\n        ...action.payload\n      };\n    }\n    case \"onGrabData\": {\n      return {\n        ...state,\n        loading: false,\n        data: [...state.data, ...action.payload.data],\n        currentPage: state.currentPage + 1\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst useLazyLoad = ({ triggerRef, onGrabData, options }) => {\n  const [state, dispatch] = useReducer(reducer, {\n    loading: false,\n    currentPage: 1,\n    data: []\n  });\n\n  const _handleEntry = async (entry) => {\n    const boundingRect = entry.boundingClientRect;\n    const intersectionRect = entry.intersectionRect;\n\n    if (\n      !state.loading &&\n      entry.isIntersecting &&\n      intersectionRect.bottom - boundingRect.bottom <= INTERSECTION_THRESHOLD\n    ) {\n      dispatch({ type: \"set\", payload: { loading: true } });\n      const data = await onGrabData(state.currentPage);\n      dispatch({ type: \"onGrabData\", payload: { data } });\n    }\n  };\n  const handleEntry = debounce(_handleEntry, LOAD_DELAY_MS);\n\n  const onIntersect = useCallback(\n    (entries) => {\n      handleEntry(entries[0]);\n    },\n    [handleEntry]\n  );\n\n  useEffect(() => {\n    if (triggerRef.current) {\n      const container = triggerRef.current;\n      const observer = new IntersectionObserver(onIntersect, options);\n\n      observer.observe(container);\n\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [triggerRef, onIntersect, options]);\n\n  return state;\n};\n\nexport default useLazyLoad;"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,WAAhC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,MAAMC,sBAAsB,GAAG,CAA/B;AACA,MAAMC,aAAa,GAAG,GAAtB;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACjC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,KAAL;MAAY;QACV,OAAO,EACL,GAAGF,KADE;UAEL,GAAGC,MAAM,CAACE;QAFL,CAAP;MAID;;IACD,KAAK,YAAL;MAAmB;QACjB,OAAO,EACL,GAAGH,KADE;UAELI,OAAO,EAAE,KAFJ;UAGLC,IAAI,EAAE,CAAC,GAAGL,KAAK,CAACK,IAAV,EAAgB,GAAGJ,MAAM,CAACE,OAAP,CAAeE,IAAlC,CAHD;UAILC,WAAW,EAAEN,KAAK,CAACM,WAAN,GAAoB;QAJ5B,CAAP;MAMD;;IACD;MACE,OAAON,KAAP;EAhBJ;AAkBD,CAnBD;;AAqBA,MAAMO,WAAW,GAAG,QAAyC;EAAA;;EAAA,IAAxC;IAAEC,UAAF;IAAcC,UAAd;IAA0BC;EAA1B,CAAwC;EAC3D,MAAM,CAACV,KAAD,EAAQW,QAAR,IAAoBjB,UAAU,CAACK,OAAD,EAAU;IAC5CK,OAAO,EAAE,KADmC;IAE5CE,WAAW,EAAE,CAF+B;IAG5CD,IAAI,EAAE;EAHsC,CAAV,CAApC;;EAMA,MAAMO,YAAY,GAAG,MAAOC,KAAP,IAAiB;IACpC,MAAMC,YAAY,GAAGD,KAAK,CAACE,kBAA3B;IACA,MAAMC,gBAAgB,GAAGH,KAAK,CAACG,gBAA/B;;IAEA,IACE,CAAChB,KAAK,CAACI,OAAP,IACAS,KAAK,CAACI,cADN,IAEAD,gBAAgB,CAACE,MAAjB,GAA0BJ,YAAY,CAACI,MAAvC,IAAiDrB,sBAHnD,EAIE;MACAc,QAAQ,CAAC;QAAET,IAAI,EAAE,KAAR;QAAeC,OAAO,EAAE;UAAEC,OAAO,EAAE;QAAX;MAAxB,CAAD,CAAR;MACA,MAAMC,IAAI,GAAG,MAAMI,UAAU,CAACT,KAAK,CAACM,WAAP,CAA7B;MACAK,QAAQ,CAAC;QAAET,IAAI,EAAE,YAAR;QAAsBC,OAAO,EAAE;UAAEE;QAAF;MAA/B,CAAD,CAAR;IACD;EACF,CAbD;;EAcA,MAAMc,WAAW,GAAGvB,QAAQ,CAACgB,YAAD,EAAed,aAAf,CAA5B;EAEA,MAAMsB,WAAW,GAAGzB,WAAW,CAC5B0B,OAAD,IAAa;IACXF,WAAW,CAACE,OAAO,CAAC,CAAD,CAAR,CAAX;EACD,CAH4B,EAI7B,CAACF,WAAD,CAJ6B,CAA/B;EAOA1B,SAAS,CAAC,MAAM;IACd,IAAIe,UAAU,CAACc,OAAf,EAAwB;MACtB,MAAMC,SAAS,GAAGf,UAAU,CAACc,OAA7B;MACA,MAAME,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBL,WAAzB,EAAsCV,OAAtC,CAAjB;MAEAc,QAAQ,CAACE,OAAT,CAAiBH,SAAjB;MAEA,OAAO,MAAM;QACXC,QAAQ,CAACG,UAAT;MACD,CAFD;IAGD;EACF,CAXQ,EAWN,CAACnB,UAAD,EAAaY,WAAb,EAA0BV,OAA1B,CAXM,CAAT;EAaA,OAAOV,KAAP;AACD,CA5CD;;GAAMO,W;;AA8CN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}